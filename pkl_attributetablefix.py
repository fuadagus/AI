# -*- coding: utf-8 -*-
"""PKL_AttributeTableFix

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18LSnkOs03u9vcVVvf0-3Mn42inAv0bNo
"""

#@title Mulai
!pip install geopandas
!pip install fuzzywuzzy

#@title Data dan Proses
from google.colab import files
import geopandas as gpd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.neighbors import NearestNeighbors
import zipfile
import ipywidgets as widgets
from IPython.display import display
from fuzzywuzzy import process

uploaded_file = files.upload()

zip_file_path = next(iter(uploaded_file))
extract_dir = 'extracted_files'
with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:
    zip_ref.extractall(extract_dir)


gdbFile = input("Masukkan nama file: ")
gdb = gpd.read_file("/content/extracted_files/" + gdbFile, driver='FileGDB')

print("Kolom yang tersedia:")
for column in gdb:
    print(column)

column_to_edit = input("Masukkan nama kolom yang akan diedit: ")
output = input("Masukkan nama output: ")

dataset = [
    'Sekolah bangunan',
    'Kampung berbatas tegas',
    'Kampung tidak berbatas tegas',
    'Rumah terpencar',
    'Rumah di atas air',
    'Sawah',
    'Tegalan',
    'Sawah tadah hujan',
    'Tanaman teratur',
    'Hutan belantara',
    'Belukar',
    'Pohon Ciri',
    'Bambu',
    'Rumput',
    'Alang-alang',
    'Gelagah',
    'Sabana',
    'Damar',
    'Bakau',
    'Palem rawa',
    'Cemara',
    'Jati',
    'Coklat',
    'Sagu',
    'Kelapa',
    'Kelapa sawit',
    'Aren',
    'Jenis palem lain',
    'Cengkeh',
    'Karet',
    'Kopi',
    'Kina',
    'Teh',
    'Agave',
    'Lada',
    'Pasir kerikil',
    'Bukit pasir',
    'Penggaraman',
    'Hutan pasang',
    'Gosong dalam sungai',
    'Gosong dalam laut selalu kelihatan',
    'Tegalan tidak berbatas tegas',
    'Bangunan terasing (material batu)',
    'Bangunan terasing (material kayu)',
    'Bangunan terasing (material besi)',
    'Bangunan terasing (material bambu)',
    'Jalan layang',
    'Jalan tol',
    'Jalan raya dua jalur',
    'Jalan keras kelas utama (kelas I dan II)',
    'Jalan keras (kelas II, IIIA, dan IV)',
    'Jalan keras lain-lain',
    'Jalan logging',
    'Jalan perkebunan',
    'Jalan gerobak',
    'Jalan kuda',
    'Jalan setapak',
    'Bagian jalan timbunan3)',
    'Bagian jalan galian3)',
    'Bagian jalan yang terjal4)',
    'Jembatan batu',
    'Jembatan besi',
    'Jembatan kayu',
    'Jembatan bambu',
    'Jembatan kayu beratap',
    'Jembatan gantung',
    'Urung-urung',
    'Margantara',
    'Jalantara',
    'Pelayangan mobil',
    'Pelayangan hewan',
    'Pelayangan orang',
    'Dangkalan Sungai',
    'Jalan kereta api rangkap',
    'Jalan kereta api tunggal',
    'Terowongan',
    'Jalan kereta api bergerigi',
    'Stasiun kereta api',
    'Pemberhentian kereta api',
    'Penyinggahan kereta api',
    'Lapangan terbang sipil',
    'Lapangan terbang darurat',
    'Tonggak kilometer',
    'hantaran tegangan tinggi listrik',
    'Pipa minyak',
    'Pipa air',
    'Pipa gas',
    'Tempat cebakan bijih',
    'Menara jara/stasiun rilay',
    'Tangki minyak',
    'Tangki air',
    'Tangki gas',
    'Pagar batu',
    'Pagar besi',
    'Pagar kayu',
    'Pagar tanaman',
    'Los pasar',
    'Pesanggarahan',
    'Masjid',
    'Gereja',
    'Klenteng',
    'Pura',
    'Puri',
    'Candi',
    'Pekuburan Islam',
    'Pekuburan Kristen',
    'Pekuburan Cina',
    'Pekuburan Hindu',
    'Tanda peringatan',
    'Sumur',
    'Sumur jara',
    'Waduk batu',
    'Tonggak batas',
    'Korok tambang',
    'Tambang mati',
    'Pusat listrik tenaga air',
    'Pusat listrik tenaga uap',
    'Pusat listrik tenaga besi',
    'Mata air',
    'Sumber air panas',
    'Air terjun',
    'Pusaran air',
    'Dapat dilayari',
    'Sungai',
    'Sungai musiman',
    'Sungai bawah tanah',
    'Jeram',
    'Terusan',
    'Saluran air',
    'Bendungan dengan pintu air',
    'Bendungan tanpa pintu air',
    'Pengempang',
    'Arah arus',
    'Batu persarangan burung',
    'Gua',
    'Sumber lumpur',
    'Sumber gas',
    'Sumber belerang',
    'Timbunan',
    'Galian',
    'Garis sama tinggi',
    'Garis sama tinggi bantuan',
    'Parit',
    'Tanggul',
    'Batas negara',
    'Batas provinsi',
    'Batas kabupaten',
    'Batas kotamadya',
    'Batas kecamatan',
    'Batas penumbuhan',
    'Batas perkebunan dan konsesnsi',
    'Batas kawasan kehutanan',
    'Batas alam lindung',
    'Kantor Gubernur',
    'Kantor Bupati',
    'Kantor Walikota',
    'Kantor Camat',
    'Titik triangulasi ke I (primair)',
    'Titik triangulasi ke II (secondair)',
    'Titik triangulasi ke III (tertiair)',
    'Titik triangulasi ke IV (quartair)',
    'Stasiun astronomi',
    'Tiang penyipat datar',
]

# vectorizer = TfidfVectorizer()
# X = vectorizer.fit_transform(dataset)

# column_data = gdb[column_to_edit].to_numpy()

# nn = NearestNeighbors(n_neighbors=1, metric='cosine')
# nn.fit(X)

# corrections = []

# for data_point in column_data:
#     query_vector = vectorizer.transform([data_point])
#     distances, indices = nn.kneighbors(query_vector)
#     corrected_value = dataset[indices[0][0]]
#     corrections.append(corrected_value)


corrections = []

for data_point in gdb[column_to_edit]:
    best_match, _ = process.extractOne(data_point, dataset)
    corrections.append(best_match)


new_column_name = "Correction"
gdb[new_column_name] = corrections

output_shapefile = output
output_shp = output_shapefile + ".shp"
output_dbf = output_shapefile + ".dbf"
output_shx = output_shapefile + ".shx"
output_prj = output_shapefile + ".prj"
output_cpg = output_shapefile + ".cpg"

gdb.to_file(output_shp, driver='ESRI Shapefile')


gdf = gpd.read_file(output_shp)
attribute_table = gdf[[column_to_edit, new_column_name]]
attribute_table_widget = widgets.Output()

with attribute_table_widget:
    display(attribute_table)

attribute_table_widget

#@title Simpan { vertical-output: true }
e
zip_filename = output+ ".zip"
with zipfile.ZipFile(zip_filename, 'w') as zipf:
    zipf.write(output_shp)
    zipf.write(output_dbf)
    zipf.write(output_shx)
    zipf.write(output_prj)
    zipf.write(output_cpg)

files.download(zip_filename)

#@title Restart
import os
import shutil

def clean_directory(directory):
    
    if os.path.exists(directory):
        
        for file_name in os.listdir(directory):
            file_path = os.path.join(directory, file_name)
            
            
            if os.path.isfile(file_path):
                os.remove(file_path)
                
            
            elif os.path.isdir(file_path):
                shutil.rmtree(file_path)
                
        print("Directory cleaned.")
    else:
        print("Directory does not exist.")


directory_to_clean = "/content/"


clean_directory(directory_to_clean)